{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\nfunction* fetchServices() {\n  try {\n    const response = yield call(axios.get, 'http://localhost:7070/api/services');\n    yield put({\n      type: 'FETCH_SERVICES_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    yield put({\n      type: 'FETCH_SERVICES_FAILURE',\n      payload: error.message\n    });\n  }\n}\nexport function* watchFetchServices() {\n  yield takeEvery('FETCH_SERVICES_REQUEST', fetchServices);\n}\nexport default function* rootSaga() {\n  yield all([watchFetchServices()]);\n}","map":{"version":3,"names":["takeEvery","call","put","axios","fetchServices","response","get","type","payload","data","error","message","watchFetchServices","rootSaga","all"],"sources":["C:/Users/lexxd/my-project/frontend/src/sagas/index.js"],"sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nfunction* fetchServices() {\r\n  try {\r\n    const response = yield call(axios.get, 'http://localhost:7070/api/services');\r\n    yield put({ type: 'FETCH_SERVICES_SUCCESS', payload: response.data });\r\n  } catch (error) {\r\n    yield put({ type: 'FETCH_SERVICES_FAILURE', payload: error.message });\r\n  }\r\n}\r\n\r\nexport function* watchFetchServices() {\r\n  yield takeEvery('FETCH_SERVICES_REQUEST', fetchServices);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([watchFetchServices()]);\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AACzD,OAAOC,KAAK,MAAM,OAAO;AAEzB,UAAUC,aAAaA,CAAA,EAAG;EACxB,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,IAAI,CAACE,KAAK,CAACG,GAAG,EAAE,oCAAoC,CAAC;IAC5E,MAAMJ,GAAG,CAAC;MAAEK,IAAI,EAAE,wBAAwB;MAAEC,OAAO,EAAEH,QAAQ,CAACI;IAAK,CAAC,CAAC;EACvE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMR,GAAG,CAAC;MAAEK,IAAI,EAAE,wBAAwB;MAAEC,OAAO,EAAEE,KAAK,CAACC;IAAQ,CAAC,CAAC;EACvE;AACF;AAEA,OAAO,UAAUC,kBAAkBA,CAAA,EAAG;EACpC,MAAMZ,SAAS,CAAC,wBAAwB,EAAEI,aAAa,CAAC;AAC1D;AAEA,eAAe,UAAUS,QAAQA,CAAA,EAAG;EAClC,MAAMC,GAAG,CAAC,CAACF,kBAAkB,CAAC,CAAC,CAAC,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}